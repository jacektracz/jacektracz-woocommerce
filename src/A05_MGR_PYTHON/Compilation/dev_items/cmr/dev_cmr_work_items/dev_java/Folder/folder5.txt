package com.misys.kgrserver.handler;

import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.util.Collection;

import java.util.Iterator;
import java.util.List;
import java.util.Set;


import com.reuters.kgr.util.IdConvertion;

import com.google.common.collect.Lists;
import com.misys.dao.rknet.KnuserDAO;
import com.misys.dao.rknet.FolderDAO;
import com.misys.dao.rknet.AccessFolderDAO;
import com.misys.kgrserver.persistence.JPAFactory;
import com.misys.model.rknet.AccessFolder;
import com.misys.model.rknet.Folder;
import com.misys.model.rknet.Knuser;
import com.reuters.kgl.facade.beans.ACKVO;
import com.reuters.kgl.facade.beans.AccessInsertACKVO;
import com.reuters.kgl.facade.beans.AccessMultiQueryACKVO;
import com.reuters.kgl.facade.beans.AccessUpdateACKVO;
import com.reuters.kgl.facade.beans.AccessibleDataVO;
import com.reuters.kgl.facade.beans.CollFolderACKVO;
import com.reuters.kgl.facade.beans.CoverageNameDataVO;
import com.reuters.kgl.facade.beans.CptyLockDataVO;
import com.reuters.kgl.facade.beans.FolderACKVO;
import com.reuters.kgl.facade.beans.FolderAcceptByIdentifierVO;
import com.reuters.kgl.facade.beans.FolderAccessInsertVO;
import com.reuters.kgl.facade.beans.FolderAccessRemoveVO;
import com.reuters.kgl.facade.beans.FolderAccessUpdateVO;
import com.reuters.kgl.facade.beans.FolderCapitalConstantsQueryACKVO;
import com.reuters.kgl.facade.beans.FolderGetACKVO;
import com.reuters.kgl.facade.beans.FolderGetDeltaVO;
import com.reuters.kgl.facade.beans.FolderGetEntityIdentityByNameVO;
import com.reuters.kgl.facade.beans.FolderGetEntityIdentityByShortNameVO;
import com.reuters.kgl.facade.beans.FolderInsertCodifierElementVO;
import com.reuters.kgl.facade.beans.FolderInsertFolderCapitalConstantsVO;
import com.reuters.kgl.facade.beans.FolderIsChildVO;
import com.reuters.kgl.facade.beans.FolderLinkVO;
import com.reuters.kgl.facade.beans.FolderLockInsertVO;
import com.reuters.kgl.facade.beans.FolderLockRemoveVO;
import com.reuters.kgl.facade.beans.FolderLockUpdateVO;
import com.reuters.kgl.facade.beans.FolderQueryAccessVO;
import com.reuters.kgl.facade.beans.FolderQueryChildrenVO;
import com.reuters.kgl.facade.beans.FolderQueryCodifierElementVO;
import com.reuters.kgl.facade.beans.FolderQueryDVDBVO;
import com.reuters.kgl.facade.beans.FolderQueryDVVO;
import com.reuters.kgl.facade.beans.FolderQueryDirectChildrenVO;
import com.reuters.kgl.facade.beans.FolderQueryDirectParentsVO;
import com.reuters.kgl.facade.beans.FolderQueryEntityIdentityByNameVO;
import com.reuters.kgl.facade.beans.FolderQueryEntityIdentityByShortNameVO;
import com.reuters.kgl.facade.beans.FolderQueryFolderCapitalConstantsVO;
import com.reuters.kgl.facade.beans.FolderQueryIdentityByCodeVO;
import com.reuters.kgl.facade.beans.FolderQueryLocksVO;
import com.reuters.kgl.facade.beans.FolderQueryParentsVO;
import com.reuters.kgl.facade.beans.FolderRejectByIdentifierVO;
import com.reuters.kgl.facade.beans.FolderRemoveCodifierElementVO;
import com.reuters.kgl.facade.beans.FolderRemoveFolderCapitalConstantsVO;
import com.reuters.kgl.facade.beans.FolderRemoveLinkVO;
import com.reuters.kgl.facade.beans.FolderUpdateCodifierElementVO;
import com.reuters.kgl.facade.beans.FolderUpdateFolderCapitalConstantsVO;
import com.reuters.kgl.facade.beans.GenericACKVO;
import com.reuters.kgl.facade.beans.GenericIdACKVO;
import com.reuters.kgl.facade.beans.GenericIdentityACKVO;
import com.reuters.kgl.facade.beans.GenericIdentityVectorACKVO;
import com.reuters.kgl.facade.beans.GenericNACKVO;
import com.reuters.kgl.facade.beans.GetIdentityACKVO;
import com.reuters.kgl.facade.beans.InsertACKVO;
import com.reuters.kgl.facade.beans.InsertCodifierElementACKVO;
import com.reuters.kgl.facade.beans.InsertLinkACKVO;
import com.reuters.kgl.facade.beans.IsChildACKVO;
import com.reuters.kgl.facade.beans.LockDataVO;
import com.reuters.kgl.facade.beans.LockInsertACKVO;
import com.reuters.kgl.facade.beans.LockQueryACKVO;
import com.reuters.kgl.facade.beans.LockUpdateACKVO;
import com.reuters.kgl.facade.beans.QueryCodifierElementACKVO;
import com.reuters.kgl.facade.beans.QueryIdentityACKVO;
import com.reuters.kgl.facade.beans.QueryLinkACKVO;
import com.reuters.kgl.facade.beans.QueryLinkTreeACKVO;
import com.reuters.kgl.facade.beans.RemoveACKVO;
import com.reuters.kgl.facade.beans.UpdateACKVO;
import com.reuters.kgl.facade.beans.UpdateCodifierElementACKVO;
//import com.reuters.kgl.facade.beans.FolderGetACKVO;
//import com.reuters.kgl.facade.beans.GenericFolderVectorACKVO;
import com.reuters.kgl.facade.beans.IdentifierDataVO;
import com.reuters.kgl.facade.beans.IdentityDataVO;
import com.reuters.kgl.facade.beans.NameDataVO;
import com.reuters.kgl.facade.beans.ShortNameDataVO;
import com.reuters.kgl.facade.beans.FolderDataVO;
import com.reuters.kgl.facade.beans.FolderGetByIdentifierVO;
import com.reuters.kgl.facade.beans.FolderGetByNameVO;

import com.reuters.kgl.facade.beans.FolderGetByShortNameVO;
import com.reuters.kgl.facade.beans.FolderGetIdentityByIdentifierVO;
import com.reuters.kgl.facade.beans.FolderGetIdentityByNameVO;
import com.reuters.kgl.facade.beans.FolderGetIdentityByShortNameVO;
import com.reuters.kgl.facade.beans.FolderInsertVO;
import com.reuters.kgl.facade.beans.FolderQueryIdentityByNameVO;
import com.reuters.kgl.facade.beans.FolderQueryIdentityByShortNameVO;
//import com.reuters.kgl.facade.beans.FolderQueryFoldersByShortNameVO;
import com.reuters.kgl.facade.beans.FolderRemoveVO;
import com.reuters.kgl.facade.beans.FolderUpdateVO;
import com.reuters.kgl.facade.beans.ValueObject;
import com.reuters.kgl.facade.exception.NACKException;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

import org.apache.commons.lang.NotImplementedException;

import com.reuters.kgl.facade.beans.*;

public class FolderHandler extends AbstractValueObjectHandler {

    FolderDAO folderDao;
    AccessFolderDAO accessFolderDao;
    KnuserDAO knuserDao;
    
    Boolean transationByRow = true;
    Boolean jpaOldApi = false;
    
    public FolderHandler() {
        super();
        log_info("FolderHandler::FolderHandler::method_start");
        //PrintStateEx("FolderHandler::FolderHandler::start");
        folderDao = new FolderDAO(jpa_getEmRate_1());
        accessFolderDao = new AccessFolderDAO(jpa_getEmRate_1());
        knuserDao = new KnuserDAO(jpa_getEmRate_1());
        //PrintStateEx("FolderHandler::FolderHandler::end");
        log_info("FolderHandler::FolderHandler::method_end");
    }
    
    public EntityManager jpa_getEmRate_1()
    {
    	return emRknet;
    }
    
    public EntityTransaction jpa_getTransactionRate_1()
    {
    	return etRknet;
    }
    
    public EntityManager jpa_getEmRate_2()
    {
    	return emRknet;
    }
    
    public EntityTransaction jpa_getTransactionRate_2()
    {
    	return etRknet;
    }
    
    public static int MSG_FolderInsertVO()
    {
    	return FolderInsertVO.MSG_ID;
    }
    public static int MSG_FolderUpdateVO()
    {
    	return FolderUpdateVO.MSG_ID;
    }
    public static int MSG_FolderRemoveVO()
    {
    	return FolderRemoveVO.MSG_ID;
    }
    public static int MSG_FolderGetByIdentifierVO()
    {
    	return FolderGetByIdentifierVO.MSG_ID;
    }
    public static int MSG_FolderGetIdentityByIdentifierVO()
    {
    	return FolderGetIdentityByIdentifierVO.MSG_ID;
    }
    public static int MSG_FolderGetByNameVO()
    {
    	return FolderGetByNameVO.MSG_ID;
    }
    
    public static int MSG_FolderGetByShortNameVO()
    {
    	return FolderGetByShortNameVO.MSG_ID;
    }
    public static int MSG_FolderGetIdentityByNameVO()
    {
    	return FolderGetIdentityByNameVO.MSG_ID;
    }
    public static int MSG_FolderGetIdentityByShortNameVO()
    {
    	return FolderGetIdentityByShortNameVO.MSG_ID;
    }
    public static int MSG_FolderQueryIdentityByShortNameVO()
    {
    	return FolderQueryIdentityByShortNameVO.MSG_ID;
    }
    public static int MSG_FolderQueryIdentityByNameVO()
    {
    	return FolderQueryIdentityByNameVO.MSG_ID;
    }
    
    @Override
    public ValueObject handle(final ValueObject object) {
        try {
            //PrintStateEx("FolderHandler::handle");
        	log_info("FolderHandler::handle::method_start::14_14");
            final Integer msgId = object.getMsgId();
            switch (msgId) {
            case FolderInsertVO.MSG_ID:
                return knel_folderInsert((FolderInsertVO) object);
            case FolderUpdateVO.MSG_ID:
                return knel_folderUpdate_32739((FolderUpdateVO) object);
            case FolderRemoveVO.MSG_ID:
                return knel_removeFolder_32740((FolderRemoveVO) object);
            case FolderGetByIdentifierVO.MSG_ID:
                return knel_folderGetByIdentifier_32741((FolderGetByIdentifierVO) object);
            case FolderGetIdentityByIdentifierVO.MSG_ID:
                return knel_folderGetIdentityByIdentifier_32750((FolderGetIdentityByIdentifierVO) object);
            case FolderGetByNameVO.MSG_ID:
                return knel_folderGetByName_32751((FolderGetByNameVO) object);
            case FolderGetByShortNameVO.MSG_ID:
                return knel_folderGetByShortName_32610((FolderGetByShortNameVO) object);
            case FolderGetIdentityByNameVO.MSG_ID:
                return knel_folderGetIdentityByName_32753((FolderGetIdentityByNameVO) object);
            case FolderGetIdentityByShortNameVO.MSG_ID:
                return knel_folderGetIdentityByShortName_32612((FolderGetIdentityByShortNameVO) object);
            case FolderQueryIdentityByShortNameVO.MSG_ID:
                return knel_folderQueryIdentityByShortName_32622((FolderQueryIdentityByShortNameVO) object);
            case FolderQueryIdentityByNameVO.MSG_ID:
                return knel_folderQueryIdentityByName_32755((FolderQueryIdentityByNameVO) object);
                
            //case KNEL_TENOR_QUERY_TENORY_BY_SHORT_NAME:
              //  return knel_folderQueryFoldersByShortName_32757((FolderQueryFolderyByShortNameVO) object);
                
            case FolderGetDeltaVO.MSG_ID:
                return folderGetDelta((FolderGetDeltaVO) object);
            case FolderAcceptByIdentifierVO.MSG_ID:
                return folderAcceptByIdentifier((FolderAcceptByIdentifierVO) object);
            case FolderRejectByIdentifierVO.MSG_ID:
                return folderRejectByIdentifier((FolderRejectByIdentifierVO) object);
            /*
            // implemented start   
            case FolderInsertVO.MSG_ID:
                return folderInsert((FolderInsertVO) object);
                
            case FolderUpdateVO.MSG_ID:
                return folderUpdate((FolderUpdateVO) object);
                
            case FolderRemoveVO.MSG_ID:
                return folderRemove((FolderRemoveVO) object);
                
            case FolderGetByIdentifierVO.MSG_ID:
                return folderGetByIdentifier((FolderGetByIdentifierVO) object);
                                
            case FolderGetByNameVO.MSG_ID:
                return folderGetByName((FolderGetByNameVO) object);
                
                
            case FolderGetByShortNameVO.MSG_ID:
                return folderGetByShortName((FolderGetByShortNameVO) object);
                
            case FolderGetIdentityByNameVO.MSG_ID:
                return folderGetIdentityByName((FolderGetIdentityByNameVO) object);
                
            case FolderGetIdentityByShortNameVO.MSG_ID:
                return folderGetIdentityByShortName((FolderGetIdentityByShortNameVO) object);
                
            case FolderGetIdentityByIdentifierVO.MSG_ID:
                return folderGetIdentityByIdentifier((FolderGetIdentityByIdentifierVO) object);
                
            case FolderQueryIdentityByShortNameVO.MSG_ID:
                return folderQueryIdentityByShortName((FolderQueryIdentityByShortNameVO) object);
                
            case FolderQueryIdentityByNameVO.MSG_ID:
                return folderQueryIdentityByName((FolderQueryIdentityByNameVO) object);
                
            //implemented end
            */
                
            case FolderQueryAccessVO.MSG_ID:
                return folderQueryAccess((FolderQueryAccessVO) object);
                
            case FolderQueryParentsVO.MSG_ID:
                return folderQueryParents((FolderQueryParentsVO) object);

            case FolderQueryChildrenVO.MSG_ID:
                return folderQueryChildren((FolderQueryChildrenVO) object);

                
                
                
            case FolderQueryIdentityByCodeVO.MSG_ID:
                return folderQueryIdentityByCode((FolderQueryIdentityByCodeVO) object);
                
            case FolderLinkVO.MSG_ID:
                return folderLink((FolderLinkVO) object);
                
            case FolderRemoveLinkVO.MSG_ID:
                return folderRemoveLink((FolderRemoveLinkVO) object);
                
            case FolderQueryDirectChildrenVO.MSG_ID:
                return folderQueryDirectChildren((FolderQueryDirectChildrenVO) object);
                
            case FolderQueryDirectParentsVO.MSG_ID:
                return folderQueryDirectParents((FolderQueryDirectParentsVO) object);
                
                
                
            case FolderQueryDVVO.MSG_ID:
                return folderQueryDV((FolderQueryDVVO) object);
                
            case FolderGetEntityIdentityByNameVO.MSG_ID:
                return folderGetEntityIdentityByName((FolderGetEntityIdentityByNameVO) object);


            case FolderGetEntityIdentityByShortNameVO.MSG_ID:
                return folderGetEntityIdentityByShortName((FolderGetEntityIdentityByShortNameVO) object);
                
            case FolderQueryEntityIdentityByShortNameVO.MSG_ID:
                return folderQueryEntityIdentityByShortName((FolderQueryEntityIdentityByShortNameVO) object);
                
            case FolderQueryEntityIdentityByNameVO.MSG_ID:
                return folderQueryEntityIdentityByName((FolderQueryEntityIdentityByNameVO) object);
                
            case FolderInsertCodifierElementVO.MSG_ID:
                return folderInsertCodifierElement((FolderInsertCodifierElementVO) object);
                
            case FolderUpdateCodifierElementVO.MSG_ID:
                return folderUpdateCodifierElement((FolderUpdateCodifierElementVO) object);
                
            case FolderRemoveCodifierElementVO.MSG_ID:
                return folderRemoveCodifierElement((FolderRemoveCodifierElementVO) object);
                
            case FolderQueryCodifierElementVO.MSG_ID:
                return folderQueryCodifierElement((FolderQueryCodifierElementVO) object);
                
            case FolderIsChildVO.MSG_ID:
                return folderIsChild((FolderIsChildVO) object);
                
            case FolderAccessInsertVO.MSG_ID:
                return folderAccessInsert((FolderAccessInsertVO) object);
                
            case FolderAccessUpdateVO.MSG_ID:
                return folderAccessUpdate((FolderAccessUpdateVO) object);
                
            case FolderAccessRemoveVO.MSG_ID:
                return folderAccessRemove((FolderAccessRemoveVO) object);
                
                
            case FolderInsertFolderCapitalConstantsVO.MSG_ID:
                return folderInsertFolderCapitalConstants((FolderInsertFolderCapitalConstantsVO) object);
                
            case FolderUpdateFolderCapitalConstantsVO.MSG_ID:
                return folderUpdateFolderCapitalConstants((FolderUpdateFolderCapitalConstantsVO) object);
                
            case FolderRemoveFolderCapitalConstantsVO.MSG_ID:
                return folderRemoveFolderCapitalConstants((FolderRemoveFolderCapitalConstantsVO) object);

                
            case FolderQueryFolderCapitalConstantsVO.MSG_ID:
                return folderQueryFolderCapitalConstants((FolderQueryFolderCapitalConstantsVO) object);
                
            case FolderLockInsertVO.MSG_ID:
                return folderLockInsert((FolderLockInsertVO) object);
                
                
                
            case FolderLockRemoveVO.MSG_ID:
                return folderLockRemove((FolderLockRemoveVO) object);


            case FolderQueryLocksVO.MSG_ID:
                return folderQueryLocks((FolderQueryLocksVO) object);
                
            case FolderQueryDVDBVO.MSG_ID:
                folderQueryDVDB((FolderQueryDVDBVO) object);
                return new GenericACKVO();
                
            default:
                return new GenericNACKVO(NACKException.NOTFOUND, "Unknown message id");
            }
            
        } catch (final Exception e) {
            log_info_exception("FolderHandler::handle::exception:", e);
            return new GenericNACKVO(NACKException.SYSTEM, e.getMessage());
        }
    }


    
    /* INSERT TENOR */


    /**
     * Call vo2db_Folder to convert VO to model class and then
     * call JPAFactory to insert and commit transaction
     * 
     * @param requestVO
     *            request value object
     * @return value object
     */
    
    
    public InsertACKVO knel_folderInsert(final FolderInsertVO requestVO) {
        log_info("FolderHandler::knel_folderInsert::method_start");
        
        try {
            //PrintStateEx("FolderHandler::knel_folderInsert::s1");
            final FolderDataVO data = requestVO.getData();
            InsertACKVO dd_out =  bus_folderInsert(data);
            log_info("FolderHandler::knel_folderInsert::method_end");            
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::knel_folderInsert::exception:", ee);
            jpa_rollaback_Rate(true);
            throw ee;
        }
    }
    
    public InsertACKVO bus_folderInsert(final FolderDataVO data) {
        log_info("FolderHandler::bus_folderInsert::method_start");
        
        try {
            jpa_begin_Rate(true);
            //PrintStateEx("FolderHandler::knel_folderInsert::s1");            
            final Folder folder = new Folder();
            
            Boolean is_update = false;
            
            vo2db_Folder(folder,data,is_update);
            
            log_Folder(folder,"knel_folderInsert");
            
            jpa_Folder_Insert(folder);
            
            final String folderId = id2s(folder.getId());
            log_info("folder_inserted:" + folderId);
            jpa_AccessFolders_Insert(folder);
            log_info("folder_access_inserted:" + folderId);
            
            //final InsertACKVO dd_out = new InsertACKVO(folder.getShortName(),folderId);
            final InsertACKVO dd_out = new InsertACKVO(folder.getShortName(),1);
            
            jpa_commit_Rate(true);
            log_info("FolderHandler::bus_folderInsert::method_end");            
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::bus_folderInsert::exception:", ee);
            jpa_rollaback_Rate(true);
            throw ee;
        }
    }
    
    public ValueObject knel_folderUpdate_32739(final FolderUpdateVO requestVO) {
        log_info("FolderHandler::knel_folderUpdate_32739::start_method__13_40");
        try
        {
        	            
            final FolderDataVO folderData = requestVO.getData();            
            final byte[] folderId = s2id(requestVO.getData().getId());
            String sfolderId = id2s(folderId);
            ValueObject dd_out = bus_Folder_remove_insert(
            		folderData
            		,	sfolderId);
            
            log_info("FolderHandler::knel_folderUpdate_32739::end_method:");
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::knel_folderUpdate_32739::exception:", ee);            
            throw ee;
        }        
    }
    
    
    public ValueObject knel_removeFolder_32740(final FolderRemoveVO requestVO) {      
        try {
            
            log_info("FolderHandler::knel_removeFolder_32740::start_method");
            
            jpa_begin_Rate(true);
            
            final byte[] id = s2id(requestVO.getId());
            //final Folder folder = JPAFactory.getById(jpa_getEmRate_2(), Folder.class, id);
            final Folder folder = folderDao.findById(id);
            if (folder == null) 
            {
                return new GenericNACKVO();
            }
            
            jpa_AccesFolders_Remove(folder);
            
            jpa_Folder_Remove( folder );
            
            GenericACKVO dd_out = new GenericACKVO();
            jpa_commit_Rate(true);
            log_info("FolderHandler::knel_removeFolder_32740::end_method");
            return dd_out;
        } catch (final Exception e) {            
            log_info_exception("FolderHandler::knel_removeFolder_32740::exception:" + e.getMessage(), e);
            jpa_rollaback_Rate(true);
            throw e;
        }

    }
/*    
    private GenericFolderVectorACKVO knel_folderQueryFoldersByShortName_32757(final FolderQueryFolderyByShortNameVO requestVO) {
        log_info("FolderHandler::knel_folderQueryFoldersByShortName_32757::start_method:");
        final int maxLength = requestVO.getMaxLength();
        final String name = requestVO.getShortName();
        log_info("parameters:" + name + ":" + Integer.toString(maxLength));
        final List<Folder> folders = folderDao.findByShortName(name, maxLength);

        log_info("folders_founded:" + Integer.toString(folders.size()));
        try {

            final GenericFolderVectorACKVO vv_out = db2vo_Folders(folders, maxLength);

            log_info("vector_created_in_db2vo_Folders:" + Integer.toString(vv_out.getDataCollection().size()));
            return vv_out;
        } catch (final Exception e) {
            log_info_exception("FolderHandler::knel_folderQueryFoldersByShortName_32757::exception:" + e.getMessage(), e);
            throw e;
        }
    }
  */  
    
    public ValueObject knel_folderQueryIdentityByName_32755(final FolderQueryIdentityByNameVO requestVO) {

        log_info("FolderHandler::folderQueryIdentityByName_2::start_method:");
        final int maxLength = requestVO.getMaxLength();
        final String name = requestVO.getName();
        
        log_info("parameters:name:" + name + ":maxlength:" + Integer.toString(maxLength));
        
        final List<Folder> folders = folderDao.findByShortNameLike(name, maxLength);

        log_info("FolderHandler::knel_folderQueryIdentityByName_32755::folderDao.findByName:" + Integer.toString(folders.size()));
        try {

            final GenericIdentityVectorACKVO vv_out = db2vo_FoldersIdVector(folders, maxLength);

            log_info("vector_created_by_db2vo_FoldersIdVector:" + Integer.toString(vv_out.getDataCollection().size()));
            return vv_out;
        } catch (final Exception e) {
            log_info_exception("FolderHandler::knel_folderQueryIdentityByName_32755::exception:" + e.getMessage(), e);
            throw e;
        }
    }

    public ValueObject knel_folderQueryIdentityByShortName_32622(final FolderQueryIdentityByShortNameVO requestVO) {
        log_info("FolderHandler::knel_folderQueryIdentityByShortName_32622::start_method");
        final int maxLength = requestVO.getMaxLength();
        final List<Folder> Folder = JPAFactory.getMaxAmountFields(jpa_getEmRate_2(), Folder.class, maxLength, "shortName", requestVO.getShortName());        
        GenericIdentityVectorACKVO dd_out = db2vo_FoldersIdVector(Folder, maxLength);
        log_info("FolderHandler::knel_folderQueryIdentityByShortName_32622::end_method");
        return dd_out;
    }
    
    
    public ValueObject knel_folderGetByIdentifier_32741(final FolderGetByIdentifierVO requestVO) {
        log_info("FolderHandler::knel_folderGetByIdentifier_32741::start_method");
        final byte[] id = s2id(requestVO.getId());
        final Folder folder = JPAFactory.getById(jpa_getEmRate_2(), Folder.class, id);
        if (folder == null) {
            return new GenericNACKVO();
        }
        
        FolderGetACKVO dd_out =  db2vo_Folder(folder);
        log_info("FolderHandler::knel_folderGetByIdentifier_32741::end_method");
        return dd_out;
    }

    public ValueObject knel_folderGetIdentityByIdentifier_32750(final FolderGetIdentityByIdentifierVO requestVO) {
        log_info("FolderHandler::knel_folderGetIdentityByIdentifier_32750::start_method");
        final byte[] id = IdConvertion.getByteFromHexString(requestVO.getId());
        final Folder folder = JPAFactory.getById(jpa_getEmRate_2(), Folder.class, id);
        if (folder == null) {
            return new GenericNACKVO();
        }
        final IdentityDataVO identityData = new IdentityDataVO(requestVO.getId(), new NameDataVO(folder.getName()),
                new ShortNameDataVO(folder.getShortName()));
        
        ValueObject dd_out = new GenericIdentityACKVO(identityData);
        log_info("FolderHandler::knel_folderGetIdentityByIdentifier_32750::start_method");
        return dd_out;
    }

    public ValueObject knel_folderGetByName_32751(final FolderGetByNameVO requestVO) {
        log_info("FolderHandler::knel_folderGetByName_32751::start_method");
        final Folder Folder = JPAFactory.getOneByFields(jpa_getEmRate_2(), Folder.class, "name", requestVO.getName());
        if (Folder == null) {
            return new GenericNACKVO();
        }
        
        ValueObject dd_out = db2vo_Folder(Folder);
        log_info("FolderHandler::knel_folderGetByName_32751::end_method");
        return dd_out;
    }

    public ValueObject knel_folderGetByShortName_32610(final FolderGetByShortNameVO requestVO) {
        log_info("FolderHandler::knel_folderGetByName_32751::start_method");
        final Folder folder = JPAFactory.getOneByFields(jpa_getEmRate_2(), Folder.class, "shortName", requestVO.getShortName());
        if (folder == null) {
            return new GenericNACKVO();
        }
        FolderGetACKVO dd_out =  db2vo_Folder(folder);
        log_info("FolderHandler::knel_folderGetByName_32751::end_method");
        return dd_out;
    }

    public ValueObject knel_folderGetIdentityByName_32753(final FolderGetIdentityByNameVO requestVO) {
        log_info("FolderHandler::knel_folderGetIdentityByName_32753::start_method");
        final Folder folder = JPAFactory.getOneByFields(jpa_getEmRate_2(), Folder.class, "name", requestVO.getName());
        if (folder == null) {
            return new GenericNACKVO();
        }
        final String folderId = id2s(folder.getId());
        final IdentityDataVO identityData = new IdentityDataVO(folderId, new NameDataVO(folder.getName()), new ShortNameDataVO(folder.getShortName()));
        log_info("FolderHandler::knel_folderGetIdentityByName_32753::end_method");
        return new GenericIdentityACKVO(identityData);
    }

    public ValueObject knel_folderGetIdentityByShortName_32612(final FolderGetIdentityByShortNameVO requestVO) {
        log_info("FolderHandler::knel_folderGetIdentityByShortName_32612::start_method");
        final Folder folder = JPAFactory.getOneByFields(jpa_getEmRate_2(), Folder.class, "shortName", requestVO.getShortName());
        if (folder == null) {
            return new GenericNACKVO();
        }
        final String FolderId = id2s(folder.getId());
        final IdentityDataVO identityData = new IdentityDataVO(FolderId, new NameDataVO(folder.getName()), new ShortNameDataVO(folder.getShortName()));        
        GenericIdentityACKVO dd_out = new GenericIdentityACKVO(identityData);
        log_info("FolderHandler::knel_folderGetIdentityByShortName_32612::end_method");
        return dd_out;
    }
    
    /**
     * @param FolderData
     *            ew data vo to insert
     * @return inserted Folder
     */
    
    
    /* UPDATE START */
    
    public ValueObject bus_Folder_remove_insert(
    		FolderDataVO folderData
    		,String folderId) 
    {
        log_info("FolderHandler::bus_Folder_remove_insert::start_method:" + folderId);
        try
        {
            jpa_begin_Rate(true);
            
            bus_Folder_RemoveInUpdate(folderId,false);
            
            bus_Folder_InsertInUpdate(folderData,folderId,false);
            
            
            final GenericACKVO dd_out = new GenericACKVO();
            
            jpa_commit_Rate(true);
            
            log_info("FolderHandler::bus_Folder_remove_insert::end_method:");
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::bus_Folder_remove_insert::exception:", ee);
            jpa_rollaback_Rate(true);
            throw ee;
        }        
    }
    
    public ValueObject bus_Folder_RemoveInUpdate(String sfolderId, Boolean exec_transaction) {
        log_info("FolderHandler::bus_Folder_RemoveInUpdate::start_method:" + sfolderId);
        try
        {
      		jpa_begin_Rate(exec_transaction);
        	
            byte[] id = s2id(sfolderId);
            final Folder folder = folderDao.findById(id);
            jpa_Folder_Update(folder);
            jpa_AccesFolders_Remove(folder);
            
            final GenericACKVO dd_out = new GenericACKVO();
       		jpa_commit_Rate(exec_transaction);
            log_info("FolderHandler::bus_Folder_RemoveInUpdate::end_method:");
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::bus_Folder_RemoveInUpdate::exception:", ee);
       		jpa_rollaback_Rate(exec_transaction);
            throw ee;
        }        
    }
    
    public ValueObject bus_Folder_InsertInUpdate(
    		final FolderDataVO folderData
    		,String sfolderId
    		,Boolean execTransaction) 
    {
        log_info("FolderHandler::bus_Folder_InsertInUpdate::start_method" + sfolderId);
        try
        {
       		jpa_begin_Rate(execTransaction);
        	
            byte[] id = s2id(sfolderId);
            final Folder folder = folderDao.findById(id);
            
            folder.getAccessFolders().clear();
                                   
            vo2db_Folder_4Update(folder, folderData);
            
            jpa_Folder_Update(folder);
            
            Boolean is_update = false;
            
            vo2db_AccessFolders(
            		folder
                    ,folderData              
                    ,is_update);
            
            jpa_AccessFolders_Insert(
            		folder);
            
            final GenericACKVO dd_out = new GenericACKVO();
            
       		jpa_commit_Rate(execTransaction);
        	
            log_info("FolderHandler::bus_Folder_InsertInUpdate::end_method:");
            return dd_out;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::bus_Folder_InsertInUpdate::exception:", ee);
       		jpa_rollaback_Rate(execTransaction);
            throw ee;
        }        
    }
    
    /* 									UPDATE END 										*/
    
    private Folder vo2db_Folder(Folder folder,final FolderDataVO folderData,Boolean forUpdate) {
        log_info("FolderHandler::vo2db_Folder::start_method");
                
        vo2db_RawFolder(folderData,folder);
        
        if(forUpdate)
        {
            folder.setId(s2id( folderData.getId() ));          
        }
        else
        {
            byte[] id = jpa_get_id();           
            folder.setId(id);
        }
        //log_Folder(folder);
        vo2db_AccessFolders(folder,folderData,forUpdate);
        
        log_info("FolderHandler::vo2db_Folder::end_method");
        return folder;
    }
    
    private Folder vo2db_RawFolder(final FolderDataVO folderData, Folder folder) {
        log_info("FolderHandler::vo2db_RawFolder::start_method");        
        folder.setName(folderData.getName());
        folder.setShortName(folderData.getShortName());
        folder.setCountryId(s2id(folderData.getCountryAlias() ));
        
        folder.setLegalStatus('S');
        folder.setPurpose('B');
        folder.setStatus('E');
        folder.setIsEntity((short)1);
        //folder.set
        //folder.setCalendarDays(folderData.getCalendarDays());
        folder.setOca(0);                        
        log_info("FolderHandler::vo2db_RawFolder::end_method");
        return folder;
    }

    /* UPDATE TENOR */
    
    
    
    private Folder vo2db_Folder_4Update(final Folder folder, final FolderDataVO folderData) {
        log_info("FolderHandler::vo2db_Folder_4Update::start_method");
        folder.setName(folderData.getName());
        folder.setShortName(folderData.getShortName());
        //folder.setCalendarDays(folderData.getCalendarDays());
        folder.setOca(0);
        log_info("folderId::" + id2s(folder.getId()));        
        log_info("FolderHandler::vo2db_Folder_4Update::end_method");
        return folder;
    } 
    
    
    private void vo2db_AccessFolders(
            final Folder folder
            , final FolderDataVO folderData           
            , Boolean forUpdate) {
        log_info("FolderHandler::vo2db_AccessFolders::start_method");
        //final Collection<AccessibleDataVO> accessCollection = folderData.getAccessCollection();
        final Collection<AccessibleDataVO> accessCollection = Lists.newArrayList();
        log_info("accessCollection_size:" + accessCollection.size());
        final Set<AccessFolder> accessFolders = folder.getAccessFolders();
        accessFolders.clear();   
        if (accessCollection != null) {
            for (final AccessibleDataVO accessibleDataVO : accessCollection) {
                final AccessFolder accessFolder = vo2db_AccessFolder(
                        accessibleDataVO                        
                        ,forUpdate);
                accessFolder.setFolder(folder);
                log_info("AccessFolder::added_to_folder:" + id2s(accessFolder.getId()));               
                accessFolders.add(accessFolder);
            }
        }
        log_info("FolderHandler::vo2db_AccessFolders::end_method");
    }
    
    
    /**
     * @param accessibleDataVO
     *            accessible data VO
     * @return access risk class
     */
    
    

    
    private void vo2db_AccessFolder_Raw(AccessFolder accessFolder,AccessibleDataVO accessibleDataVO)
    {
        log_info("FolderHandler::vo2db_AccessFolder_Raw::method_start");
        //accessFolder.setAccessMode(accessibleDataVO.getAccessMode().toString());
        accessFolder.setAccessRightRead((short) (char) accessibleDataVO.getAccessRightRead());
        accessFolder.setAccessRightWrite((short) (char) accessibleDataVO.getAccessRightWrite());
        accessFolder.setOca(0);
        log_info("FolderHandler::vo2db_AccessFolder_Raw::method_end");        
    }
    
    private AccessFolder vo2db_AccessFolder(
            final AccessibleDataVO accessibleDataVO
            ,Boolean forUpdate) 
    {
        log_info("FolderHandler::vo2db_AccessFolder::method_start");
        final AccessFolder accessFolder = new AccessFolder();
        try{
            vo2db_AccessFolder_Raw(accessFolder,accessibleDataVO);
            if(forUpdate)
            {
                byte[] byteId = jpa_getAccessFolderId_4Update(accessibleDataVO);
                accessFolder.setId(byteId);
            }
            else
            {
                byte[] byteId = jpa_getAccessFolderId_ForInsert();           
                accessFolder.setId(byteId);
            }
            
            vo2db_UserToAccess(
                    accessFolder
                    ,accessibleDataVO);
            
            log_info("FolderHandler::vo2db_AccessFolder::method_end");            
            
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::vo2db_AccessFolder::exception:", ee);
            //throw ee;
        }   
        return accessFolder;
    }
    
    private void vo2db_UserToAccess(AccessFolder accessFolder,AccessibleDataVO accessibleDataVO)
    {
        log_info("FolderHandler::vo2db_UserToAccess::method_start");
        final IdentifierDataVO user = accessibleDataVO.getUser();
        if (user != null) {
            log_info("KNUser_is_not_null:" + user.getId());
            byte[] uid = s2id(user.getId());
            final Knuser knuser = knuserDao.findById(uid);
            log_Knuser(knuser);
            accessFolder.setKnuser(knuser);
        }
        else
        {
            log_info("KNUser_is_null");
        }
        log_info("FolderHandler::vo2db_UserToAccess::method_end");
    }
    
    
    
    private byte[] jpa_getAccessFolderId_4Update(final AccessibleDataVO accessibleDataVO) {
        log_info("FolderHandler::jpa_getAccessFolderId_4Update::method_start");       
        try{
            final String accessibleDataId = accessibleDataVO.getId();
            log_info("getIdAccessFolder::accessibleDataId:" + accessibleDataId);
            byte[] byteId;
            if (accessibleDataId == null) {             
                log_info("getIdAccessFolder::accessibleDataId_null:" + accessibleDataId);
                byteId = jpa_get_id();
                final IdentifierDataVO identifierDataId = accessibleDataVO.getDataId();
                final String folderId = identifierDataId.getId();
                log_info("accessibleDataVO__getIdAccessFolder::folderId:" + folderId);
                if (folderId != null) {
                    byteId = IdConvertion.getByteFromHexString(folderId);
                    log_info("getIdAccessFolder::identifierDataId_to_byte_id:" + id2s(byteId));       
                }
                else{
                    log_info("getIdAccessFolder::new_byteId:" + id2s(byteId));               
                }
                
            } else {
                log_info("getIdAccessFolder::accessibleDataId_to_byteId:" + accessibleDataId);
                byteId = IdConvertion.getByteFromHexString(accessibleDataId);
            }
            log_info("FolderHandler::jpa_getAccessFolderId_4Update::method_end" + id2s(byteId));
            return byteId;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::jpa_getAccessFolderId_4Update::exception:", ee);
            throw ee;
        }           
    }
    
    private byte[] jpa_getAccessFolderId_ForInsert() {
        log_info("FolderHandler::jpa_getAccessFolderId_ForInsert::method_start");     
        try{
            byte[] byteId = jpa_get_id();
            log_info("FolderHandler::jpa_getAccessFolderId_ForInsert::method_end" + id2s(byteId));
            return byteId;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::jpa_getAccessFolderId_ForInsert::exception:", ee);
            throw ee;
        }           
    }
    

    /**
     * @param Folder
     *            - object to update
     * @param FolderData
     *            - new data vo to update
     * @return risk class
     */
    

    
    
    
    /*                                db 2 vo                                       */


    private GenericIdentityVectorACKVO db2vo_FoldersIdVector(final List<Folder> folderList, final int maxLength) {
        log_info("FolderHandler::db2vo_FoldersIdVector::method_start:folderList_size:" + folderList.size());
        final Iterator<Folder> iterator = folderList.iterator();
        final Collection<IdentityDataVO> identityDataCollection = Lists.newArrayList();
        while (iterator.hasNext()) {
            log_info("while_start");
            final Folder folder = iterator.next();
            final String folderId = IdConvertion.getHexStringFromByte(folder.getId());
            final IdentityDataVO identityData = new IdentityDataVO(folderId, new NameDataVO(folder.getName()), new ShortNameDataVO(folder.getShortName()));
            identityDataCollection.add(identityData);

            log_info("while_end");
        }

        log_info("before_GenericIdentityVectorACKVO:identity_coll:" + identityDataCollection.size());
        
        try {
            final GenericIdentityVectorACKVO dd_out = new GenericIdentityVectorACKVO(identityDataCollection, maxLength);
            log_info("after_GenericIdentityVectorACKVO:" + dd_out.getDataCollection().size());
            return dd_out;
        } catch (final Exception e) {
            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage());
            throw e;
        }
    }

    private GenericIdentityVectorACKVO db2vo_Folders(final List<Folder> folderList, final int maxLength) {
        log_info("FolderHandler::db2vo_Folders::method_start");
        final Iterator<Folder> iterator = folderList.iterator();
        
        final Collection<FolderDataVO> identityDataCollection = Lists.newArrayList();
        
        while (iterator.hasNext()) {
            log_info("FolderHandler::db2vo_Folders::while_start");

            final Folder folder = iterator.next();

            log_info("FolderName:" + folder.getName());

            final String FolderId = IdConvertion.getHexStringFromByte(folder.getId());

            log_info("FolderId:" + FolderId);
            final CoverageNameDataVO ddc = new CoverageNameDataVO();
            ddc.setName(folder.getName());
            ddc.setShortName(folder.getShortName());
            String dataId ="";
			String shortName = "";
			String name ="";
			Boolean isEntity = true;
			Integer status = 1;            
            final FolderDataVO identityData = new FolderDataVO(
                    dataId 
        			,shortName 
        			,name 
        			,isEntity
        			,status);
            
            log_info("IdentityDataVO:id" + identityData.getId());
            identityDataCollection.add(identityData);
            log_info("while_end");
        }

        log_info("before_GenericIdentityVectorACKVO:" + identityDataCollection.size());
        
        try {
            
            final GenericIdentityVectorACKVO dd_out = new GenericIdentityVectorACKVO();
            
            log_info("after_GenericIdentityVectorACKVO" + dd_out.getDataCollection().size());
            
            return dd_out;
            
        } catch (final Exception e) {
            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
            throw e;
        }
    }

    
    private FolderGetACKVO db2vo_Folder(final Folder folder) {
        log_info("FolderHandler::db2vo_Folder::method_start");
        
        final FolderDataVO data = new FolderDataVO();
        final String folderId = IdConvertion.getHexStringFromByte(folder.getId());
        data.setId(folderId);
        final CoverageNameDataVO coverage = new CoverageNameDataVO(folder.getShortName(), folder.getName());
        //data.setCoverage(coverage);
        //data.setCalendarDays(folder.getCalendarDays());        
        Set<AccessFolder> ac = folder.getAccessFolders();        
        Collection<AccessibleDataVO> accessCollection = db2vo_Accessibles(folderId,ac);                
        //data.setAccessCollection(accessCollection);
        FolderGetACKVO dd_out = new FolderGetACKVO(data,folderId);
        log_info("FolderHandler::db2vo_Folder::method_end");
        return dd_out;
    }
    
    private Collection<AccessibleDataVO> db2vo_Accessibles(String folderId, Set<AccessFolder> ac) {
        log_info("FolderHandler::db2vo_Accessibles::method_start");
        log_info("FolderHandler::access_count:" + ac.size());
        Collection<AccessibleDataVO> accessCollection = Lists.newArrayList();        
        for(AccessFolder accessFolder : ac)
        {
            log_AccessFolder(accessFolder,"db2vo_Accessibles");
            String id = id2s(accessFolder.getId());
            IdentifierDataVO idFolder = new IdentifierDataVO(folderId);
            IdentifierDataVO idUser = db2vo_AccessFolderId(accessFolder);
            Character am = 'G';//accessFolder.getAccessMode().charAt(0);
            Character amr =  (char)accessFolder.getAccessRightRead();
            Character amw =  (char)accessFolder.getAccessRightWrite();           
            AccessibleDataVO ddvo = new AccessibleDataVO(id
                    , idFolder
                    , idUser
                    , am
                    , amr
                    , amw);
            ddvo.setUser(idUser);
            accessCollection.add(ddvo);
        }
        log_info("FolderHandler::db2vo_Accessibles::method_end");
        return accessCollection;
    }
    
    private IdentifierDataVO db2vo_AccessFolderId(AccessFolder accessFolder) {
        
        try{
            log_info("FolderHandler::db2vo_AccessFolderId::method_start");
            IdentifierDataVO dd_out = new IdentifierDataVO();
            Knuser user = accessFolder.getKnuser();
            if(user == null)
            {
                log_info("knuser_is_null");
                
            }else{
                log_info("knuser_is_valid");
                log_Knuser(user);               
                dd_out.setId(id2s(user.getId()));//,user.getName(),user.getShortName());
                dd_out.setName(new NameDataVO(user.getName()));
                dd_out.setShortName(new ShortNameDataVO(user.getName()));                
            }
            log_info("FolderHandler::db2vo_AccessFolderId::method_end");
            return dd_out;
        } catch (final Exception e) {
            log_info_exception("FolderHandler::db2vo_AccessFolderId::exception:" + e.getMessage(), e);
            IdentifierDataVO dd_out = new IdentifierDataVO();
            return dd_out;
        }       
    }
    
    /*                                FOLDER NOT IMPL METHODS                                       */

 	/**
 	 * Folder Query Access Request
 	 * Folder Query Locks.        
    
	 * Message Id : 7033
	 * return AccessMultiQueryACKVO
	 * throws NackException if the server response is Access Multi Query NACK
 	 */
	 public AccessMultiQueryACKVO folderQueryAccess(FolderQueryAccessVO requestVO)
	 {
		 AccessMultiQueryACKVO dd_out = new AccessMultiQueryACKVO();
		 return dd_out;
	 }
    
	 	/**
	 	 * Folder Query Children Request
	 	 * Folder query every children links.        
	    
		 * Message Id : 1367
		 * return QueryLinkTreeACKVO
		 * throws NackException if the server response is Query Link NACK
	 	 */
		 public QueryLinkTreeACKVO folderQueryChildren(FolderQueryChildrenVO requestVO)
		{
			 QueryLinkTreeACKVO dd_out = new QueryLinkTreeACKVO();
			 return dd_out;
		 }
		
		
	 	/**
	 	 * Folder Query Parents Request
	 	 * Folder query every parents links.        
	    
		 * Message Id : 1368
		 * return QueryLinkTreeACKVO
		 * throws NackException if the server response is Query Link NACK
	 	 */
		 public QueryLinkTreeACKVO folderQueryParents(FolderQueryParentsVO requestVO)
		{
			 LinkTreeVO tree = new LinkTreeVO();
			 QueryLinkTreeACKVO dd_out = new QueryLinkTreeACKVO(tree,1);
			 return dd_out;
		 }
    
 	/**
 	 * Folder Get Delta Request
 	 * 
	 * Message Id : 1348
	 * return FolderACKVO
	 * throws NackException if the server response is NACK
 	 */
	 public FolderACKVO folderGetDelta(FolderGetDeltaVO requestVO)
	 {
		 FolderACKVO dd_out = new FolderACKVO();
		 return dd_out;
	 }
	
	
 	/**
 	 * Folder Accept By Identifier Request
 	 * 
	 * Message Id : 1349
	 * return ACKVO
	 * throws NackException if the server response is NACK
 	 */
	 public ACKVO folderAcceptByIdentifier(FolderAcceptByIdentifierVO requestVO)
	{
		 try{
			 
			 ACKVO dd_out = new ACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 
	 }
	
	
 	/**
 	 * Folder Reject By Identifier Request
 	 * 
	 * Message Id : 1350
	 * return ACKVO
	 * throws NackException if the server response is NACK
 	 */
	 public ACKVO folderRejectByIdentifier(FolderRejectByIdentifierVO requestVO)
{
		 try{
			 
			 ACKVO dd_out = new ACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Insert Request
 	 * Folder insertion into the global database
    
	 * Message Id : 1351
	 * return InsertACKVO
	 * throws NackException if the server response is Insert NACK
 	 */
	 public InsertACKVO folderInsert(FolderInsertVO requestVO)
{
		 try{
			 
			 InsertACKVO dd_out = new InsertACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Update Request
 	 * Folder update into the global database
    
	 * Message Id : 1352
	 * return UpdateACKVO
	 * throws NackException if the server response is Update NACK
 	 */
	 public UpdateACKVO folderUpdate(FolderUpdateVO requestVO)
	 {
		 try{
			 
			 UpdateACKVO dd_out = new UpdateACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 
	 }
	
	
 	/**
 	 * Folder Remove Request
 	 * Folder remove from the global database
    
	 * Message Id : 1353
	 * return RemoveACKVO
	 * throws NackException if the server response is Remove NACK
 	 */
	 public RemoveACKVO folderRemove(FolderRemoveVO requestVO)
	 {
		 try{
			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
		 
	 }
	
	
 	/**
 	 * Folder Get By Identifier Request
 	 * Folder search into the global database
    
	 * Message Id : 1354
	 * return FolderGetACKVO
	 * throws NackException if the server response is Get NACK
 	 */
	 public FolderGetACKVO folderGetByIdentifier(FolderGetByIdentifierVO requestVO)
	 {
		 try{
			 
			 FolderGetACKVO dd_out = new FolderGetACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Get By Name Request
 	 * Folder search into the global database
    
	 * Message Id : 1355
	 * return FolderGetACKVO
	 * throws NackException if the server response is Get NACK
 	 */
	 public FolderGetACKVO folderGetByName(FolderGetByNameVO requestVO)
{
		 try{
			 
			 FolderGetACKVO dd_out = new FolderGetACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 
}
	
	
 	/**
 	 * Folder Get By ShortName Request
 	 * Folder search into the global database
    
	 * Message Id : 1356
	 * return FolderGetACKVO
	 * throws NackException if the server response is Get NACK
 	 */
	 public FolderGetACKVO folderGetByShortName(FolderGetByShortNameVO requestVO)
{
		 try{
			 
			 FolderGetACKVO dd_out = new FolderGetACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Get Identity By Name Request
 	 * Folder search into the global database
    
	 * Message Id : 1357
	 * return GetIdentityACKVO
	 * throws NackException if the server response is Get Identity NACK
 	 */
	 public GetIdentityACKVO folderGetIdentityByName(FolderGetIdentityByNameVO requestVO)
	 {
		 try{
			 
			 GetIdentityACKVO dd_out = new GetIdentityACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Get Identity By ShortName Request
 	 * Folder search into the global database
    
	 * Message Id : 1358
	 * return GetIdentityACKVO
	 * throws NackException if the server response is Get Identity NACK
 	 */
	 public GetIdentityACKVO folderGetIdentityByShortName(FolderGetIdentityByShortNameVO requestVO)
{
		 try{
			 
			 GetIdentityACKVO dd_out = new GetIdentityACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Get Identity By Identifier Request
 	 * Folder search into the global database
    
	 * Message Id : 1359
	 * return GetIdentityACKVO
	 * throws NackException if the server response is Get Identity NACK
 	 */
	 public GetIdentityACKVO folderGetIdentityByIdentifier(FolderGetIdentityByIdentifierVO requestVO)
{
		 try{
			 
			 GetIdentityACKVO dd_out = new GetIdentityACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Identity By ShortName Request
 	 * Folder search into the global database
    
	 * Message Id : 1360
	 * return QueryIdentityACKVO
	 * throws NackException if the server response is Query Identity NACK
 	 */
	 public QueryIdentityACKVO folderQueryIdentityByShortName(FolderQueryIdentityByShortNameVO requestVO)
	 {
	        log_info("TenorHandler::folderQueryIdentityByShortName::start_method");
	        //final int maxLength = requestVO.getMaxLength();
	        //final List<Tenor> Tenor = JPAFactory.getMaxAmountFields(jpa_getEmRate_2(), Tenor.class, maxLength, "shortName", requestVO.getShortName());        
	        //QueryIdentityACKVO dd_out = db2vo_TenorsIdVector(Tenor, maxLength);
	        QueryIdentityACKVO dd_out = new QueryIdentityACKVO();	        
	        log_info("TenorHandler::folderQueryIdentityByShortName::end_method");
	        return dd_out;		 
		 
	 }
	
	
 	/**
 	 * Folder Query Identity By Name Request
 	 * Folder search into the global database
    
	 * Message Id : 1361
	 * return QueryIdentityACKVO
	 * throws NackException if the server response is Query Identity NACK
 	 */
	 public QueryIdentityACKVO folderQueryIdentityByName(FolderQueryIdentityByNameVO requestVO)
	 {
		 try{
			 
			 QueryIdentityACKVO dd_out = new QueryIdentityACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Identity By Code Request
 	 * Folder search into the global database
    
	 * Message Id : 1362
	 * return QueryIdentityACKVO
	 * throws NackException if the server response is Query Identity NACK
 	 */
	 public QueryIdentityACKVO folderQueryIdentityByCode(FolderQueryIdentityByCodeVO requestVO)
	 {
		 try{
			 
			 QueryIdentityACKVO dd_out = new QueryIdentityACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 
	}
	
	
 	/**
 	 * Folder Link Request
 	 * Folder link between two countries.
    
	 * Message Id : 1363
	 * return InsertLinkACKVO
	 * throws NackException if the server response is Insert NACK
 	 */
	 public InsertLinkACKVO folderLink(FolderLinkVO requestVO)
	 {
		 try{
			 
			 InsertLinkACKVO dd_out = new InsertLinkACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
     }
	
	
 	/**
 	 * Folder Remove Link Request
 	 * Folder unlink.
    
	 * Message Id : 1364
	 * return RemoveACKVO
	 * throws NackException if the server response is Remove NACK
 	 */
	 public RemoveACKVO folderRemoveLink(FolderRemoveLinkVO requestVO)
	 {
		 try{
			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::db2vo_FoldersIdVector::exception_5:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Direct Children Request
 	 * Folder query direct link identities.
    
	 * Message Id : 1365
	 * return QueryLinkACKVO
	 * throws NackException if the server response is Query Link NACK
 	 */
	 public QueryLinkACKVO folderQueryDirectChildren(FolderQueryDirectChildrenVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderQueryDirectChildren::method_start");			 
			 QueryLinkACKVO dd_out = new QueryLinkACKVO();
			 log_info("FolderHandler::folderQueryDirectChildren::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryDirectChildren::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Direct Parents Request
 	 * Folder query direct parent identities.
    
	 * Message Id : 1366
	 * return QueryLinkACKVO
	 * throws NackException if the server response is Query Link NACK
 	 */
	 public QueryLinkACKVO folderQueryDirectParents(FolderQueryDirectParentsVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderQueryDirectParents::method_start");			 
			 QueryLinkACKVO dd_out = new QueryLinkACKVO();
			 log_info("FolderHandler::folderQueryDirectParents::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryDirectParents::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
	
	
 	/**
 	 * Folder QueryDV Request
 	 * 
	 * Message Id : 1370
	 * return CollFolderACKVO
	 * throws NackException if the server response is NACK
 	 */
	 public CollFolderACKVO folderQueryDV(FolderQueryDVVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderQueryDirectParents::method_start");			 
			 CollFolderACKVO dd_out = new CollFolderACKVO();
			 log_info("FolderHandler::folderQueryDirectParents::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryDirectParents::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Get Entity Identity By Name Request
 	 * Folder search into the global database
    
	 * Message Id : 1373
	 * return GetIdentityACKVO
	 * throws NackException if the server response is Get Identity NACK
 	 */
	 public GetIdentityACKVO folderGetEntityIdentityByName(FolderGetEntityIdentityByNameVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderQueryDirectParents::method_start");			 
			 GetIdentityACKVO dd_out = new GetIdentityACKVO();
			 log_info("FolderHandler::folderQueryDirectParents::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryDirectParents::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	}
	
	
 	/**
 	 * Folder Get Entity Identity By ShortName Request
 	 * Folder search into the global database
    
	 * Message Id : 1374
	 * return GetIdentityACKVO
	 * throws NackException if the server response is Get Identity NACK
 	 */
	 public GetIdentityACKVO folderGetEntityIdentityByShortName(FolderGetEntityIdentityByShortNameVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderGetEntityIdentityByShortName::method_start");			 
			 GetIdentityACKVO dd_out = new GetIdentityACKVO();
			 log_info("FolderHandler::folderGetEntityIdentityByShortName::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderGetEntityIdentityByShortName::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Entity Identity By ShortName Request
 	 * Folder search into the global database
    
	 * Message Id : 1375
	 * return QueryIdentityACKVO
	 * throws NackException if the server response is Query Identity NACK
 	 */
	 public QueryIdentityACKVO folderQueryEntityIdentityByShortName(FolderQueryEntityIdentityByShortNameVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderGetEntityIdentityByShortName::method_start");			 
			 QueryIdentityACKVO dd_out = new QueryIdentityACKVO();
			 log_info("FolderHandler::folderGetEntityIdentityByShortName::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderGetEntityIdentityByShortName::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Entity Identity By Name Request
 	 * Folder search into the global database
    
	 * Message Id : 1376
	 * return QueryIdentityACKVO
	 * throws NackException if the server response is Query Identity NACK
 	 */
	 public QueryIdentityACKVO folderQueryEntityIdentityByName(FolderQueryEntityIdentityByNameVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderQueryEntityIdentityByName::method_start");			 
			 QueryIdentityACKVO dd_out = new QueryIdentityACKVO();
			 log_info("FolderHandler::folderQueryEntityIdentityByName::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryEntityIdentityByName::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Insert Codifier Element Request
 	 * Folder search into the global database
    
	 * Message Id : 1382
	 * return InsertCodifierElementACKVO
	 * throws NackException if the server response is Insert Codifier Element NACK
 	 */
	 public InsertCodifierElementACKVO folderInsertCodifierElement(FolderInsertCodifierElementVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderInsertCodifierElement::method_start");			 
			 InsertCodifierElementACKVO dd_out = new InsertCodifierElementACKVO();
			 log_info("FolderHandler::folderInsertCodifierElement::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderInsertCodifierElement::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Update Codifier Element Request
 	 * Folder search into the global database
    
	 * Message Id : 1383
	 * return UpdateCodifierElementACKVO
	 * throws NackException if the server response is Update Codifier Element NACK
 	 */
	 public UpdateCodifierElementACKVO folderUpdateCodifierElement(FolderUpdateCodifierElementVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderUpdateCodifierElement::method_start");			 
			 UpdateCodifierElementACKVO dd_out = new UpdateCodifierElementACKVO();
			 log_info("FolderHandler::folderUpdateCodifierElement::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderUpdateCodifierElement::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Remove Codifier Element Request
 	 * Folder search into the global database
    
	 * Message Id : 1384
	 * return RemoveACKVO
	 * throws NackException if the server response is Remove Codifier Element NACK
 	 */
	 public RemoveACKVO folderRemoveCodifierElement(FolderRemoveCodifierElementVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderRemoveCodifierElement::method_start");			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 log_info("FolderHandler::folderRemoveCodifierElement::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderRemoveCodifierElement::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Codifier Element Request
 	 * Folder search into the global database
    
	 * Message Id : 1385
	 * return QueryCodifierElementACKVO
	 * throws NackException if the server response is Query Codifier Element NACK
 	 */
	 public QueryCodifierElementACKVO folderQueryCodifierElement(FolderQueryCodifierElementVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderQueryCodifierElement::method_start");			 
			 QueryCodifierElementACKVO dd_out = new QueryCodifierElementACKVO();
			 log_info("FolderHandler::folderQueryCodifierElement::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryCodifierElement::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Is Child Request
 	 * Country is Child.
    
	 * Message Id : 1386
	 * return IsChildACKVO
	 * throws NackException if the server response is Is Child NACK
 	 */
	public IsChildACKVO folderIsChild(FolderIsChildVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderIsChild::method_start");			 
			 IsChildACKVO dd_out = new IsChildACKVO();
			 log_info("FolderHandler::folderIsChild::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderIsChild::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	}
	
	
 	/**
 	 * Folder Access Insert Request
 	 * Folder Insert Access.        
    
	 * Message Id : 7030
	 * return AccessInsertACKVO
	 * throws NackException if the server response is Access Insert NACK
 	 */
	 public AccessInsertACKVO folderAccessInsert(FolderAccessInsertVO requestVO)
	{
		 try{
			 log_info("FolderHandler::folderAccessInsert::method_start");			 
			 AccessInsertACKVO dd_out = new AccessInsertACKVO();
			 log_info("FolderHandler::folderAccessInsert::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderIsChild::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Access Update Request
 	 * Folder Update Lock.        
    
	 * Message Id : 7031
	 * return AccessUpdateACKVO
	 * throws NackException if the server response is Access Update NACK
 	 */
	 public AccessUpdateACKVO folderAccessUpdate(FolderAccessUpdateVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderAccessUpdate::method_start");			 
			 AccessUpdateACKVO dd_out = new AccessUpdateACKVO();
			 log_info("FolderHandler::folderAccessUpdate::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderIsChild::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Access Remove Request
 	 * Folder Remove Lock.        
    
	 * Message Id : 7032
	 * return RemoveACKVO
	 * throws NackException if the server response is Access Remove NACK
 	 */
	 public RemoveACKVO folderAccessRemove(FolderAccessRemoveVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderAccessRemove::method_start");			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 log_info("FolderHandler::folderAccessRemove::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderAccessRemove::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
	
	
 	/**
 	 * Folder Insert Folder Capital Constants Request
 	 * Settlement Netting insertion into the global database
    
	 * Message Id : 10463
	 * return InsertACKVO
	 * throws NackException if the server response is Insert NACK
 	 */
	 public InsertACKVO folderInsertFolderCapitalConstants(FolderInsertFolderCapitalConstantsVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderInsertFolderCapitalConstants::method_start");			 
			 InsertACKVO dd_out = new InsertACKVO();
			 log_info("FolderHandler::folderInsertFolderCapitalConstants::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderInsertFolderCapitalConstants::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Update Folder Capital Constants Request
 	 * Settlement Netting update into the global database
    
	 * Message Id : 10464
	 * return UpdateACKVO
	 * throws NackException if the server response is Update NACK
 	 */
	 public UpdateACKVO folderUpdateFolderCapitalConstants(FolderUpdateFolderCapitalConstantsVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderUpdateFolderCapitalConstants::method_start");			 
			 UpdateACKVO dd_out = new UpdateACKVO();
			 log_info("FolderHandler::folderUpdateFolderCapitalConstants::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderUpdateFolderCapitalConstants::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Remove Folder Capital Constants Request
 	 * Settlement Netting remove from the global database
    
	 * Message Id : 10465
	 * return RemoveACKVO
	 * throws NackException if the server response is Remove NACK
 	 */
	 public RemoveACKVO folderRemoveFolderCapitalConstants(FolderRemoveFolderCapitalConstantsVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderRemoveFolderCapitalConstants::method_start");			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 log_info("FolderHandler::folderRemoveFolderCapitalConstants::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderRemoveFolderCapitalConstants::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Folder Capital Constants Request
 	 * Settlement Netting search into the global database
    
	 * Message Id : 10467
	 * return FolderCapitalConstantsQueryACKVO
	 * throws NackException if the server response is NACK
 	 */
	 public FolderCapitalConstantsQueryACKVO folderQueryFolderCapitalConstants(FolderQueryFolderCapitalConstantsVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderQueryFolderCapitalConstants::method_start");			 
			 FolderCapitalConstantsQueryACKVO dd_out = new FolderCapitalConstantsQueryACKVO();
			 log_info("FolderHandler::folderQueryFolderCapitalConstants::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryFolderCapitalConstants::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Lock Insert Request
 	 * Folder Insert Lock.
    
	 * Message Id : 11012
	 * return LockInsertACKVO
	 * throws NackException if the server response is Lock Insert NACK
 	 */
	 public LockInsertACKVO folderLockInsert(FolderLockInsertVO requestVO)		 
	 {
		 try{
			 log_info("FolderHandler::folderLockInsert::method_start");			 
			 LockInsertACKVO dd_out = new LockInsertACKVO();
			 log_info("FolderHandler::folderLockInsert::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderLockInsert::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Lock Update Request
 	 * Folder Update Lock.
    
	 * Message Id : 11013
	 * return LockUpdateACKVO
	 * throws NackException if the server response is Lock Update NACK
 	 */
	 public LockUpdateACKVO folderLockUpdate(FolderLockUpdateVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderLockUpdate::method_start");			 
			 LockUpdateACKVO dd_out = new LockUpdateACKVO();
			 log_info("FolderHandler::folderLockUpdate::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderLockUpdate::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Lock Remove Request
 	 * Folder Remove Lock.
    
	 * Message Id : 11014
	 * return RemoveACKVO
	 * throws NackException if the server response is Lock Remove NACK
 	 */
	 public RemoveACKVO folderLockRemove(FolderLockRemoveVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderLockRemove::method_start");			 
			 RemoveACKVO dd_out = new RemoveACKVO();
			 log_info("FolderHandler::folderLockRemove::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderLockRemove::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	
 	/**
 	 * Folder Query Locks Request
 	 * Folder Query Locks.
    
	 * Message Id : 11015
	 * return LockQueryACKVO
	 * throws NackException if the server response is Lock Query NACK
 	 */
	 public LockQueryACKVO folderQueryLocks(FolderQueryLocksVO requestVO)
	 {
		 try{
			 log_info("FolderHandler::folderQueryLocks::method_start");			 
			 Collection<LockDataVO> locks = Lists.newArrayList();
			 Collection<CptyLockDataVO> cptyLocks = Lists.newArrayList();
			 LockQueryACKVO dd_out = new LockQueryACKVO(locks,cptyLocks,1);
			 log_info("FolderHandler::folderQueryLocks::method_end");			 			 
			 return dd_out;
		      
	        } catch (final Exception e) {
	            log_info("FolderHandler::folderQueryLocks::exception:" + e.getMessage(), e);
	            throw e;
	        }		 
	 }
	
	/**
	 * Folder QueryDV DB Request
	 * 
	 * Message Id : 11027
	 * This is an asynchronous request.
	 */
	 public void folderQueryDVDB (FolderQueryDVDBVO requestVO)
	 {
		 return ;
	 }
    
	 
    
    /*                                JPA                                       */
    
    
    
    
    protected void jpa_begin_Rate(Boolean executeTransaction)
    {
        log_info("FolderHandler::jpa_begin_Transaction::method_start");
        try
        {
        	if(executeTransaction)
        	{
        	
		        if(transationByRow)
		        {
		            log_info("transationByRow__and_skipped_begin");
		        }
		        else
		        {	        	
		            log_info("jpa_begin_Transaction::execute_begin");
		            jpa_getTransactionRate_2().begin();
		        }
        	}
        	else{
        		log_info("FolderHandler::jpa_begin_Transaction::skipped");	
        	}        	
	        log_info("FolderHandler::jpa_begin_Transaction::method_end");
        } catch (final Exception e) {
            log_info_exception("FolderHandler::jpa_begin_Transaction::exception:" + e.getMessage(), e);
            throw e;            
        }       
        
    }
    
    protected void jpa_commit_Rate(Boolean executeTransaction)
    {
    	
        log_info("FolderHandler::jpa_commit_Transaction::method_start");
        try{
        	
        	if(executeTransaction)
        	{
        	
		        if(transationByRow)
		        {
		            log_info("transationByRow__and_skipped__commit");
		        }
		        else
		        {
		            log_info("jpa_begin_Transaction::execute_commit");        
		            jpa_getTransactionRate_2().commit();
		        }
        	}
        	else{
        		log_info("FolderHandler::jpa_commit_Transaction::skipped");	
        	}        	
	        log_info("FolderHandler::jpa_commit_Transaction::method_end");
        } catch (final Exception e) {
            log_info_exception("FolderHandler::jpa_commit_Transaction::exception:" + e.getMessage(), e);
            throw e;
        }       

    }
    
    protected void jpa_rollaback_Rate(Boolean executeTransaction)
    {   
        log_info("FolderHandler::jpa_rollaback_Transaction::method_start");
        try
        {
        	if(executeTransaction)
        	{
		        if(transationByRow)
		        {
		            log_info("transationByRow__and_skipped__rollback");
		        }
		        else
		        {
		            log_info("execute__rollback");                
		            if(jpa_getTransactionRate_2().isActive())
		            {
		            	
		                jpa_getTransactionRate_2().rollback();
		                log_info("rollback_executed");
		            }   
		            else
		            {
		            	log_info("transaction_is_not_active_rolback_didnt_executed");
		            }
		        }
        	}
        	else{
        		log_info("FolderHandler::jpa_rollaback_Transaction::skipped");	
        	}
        	
	        log_info("FolderHandler::jpa_rollaback_Transaction::method_end");
        } catch (final Exception e) {
            log_info_exception("FolderHandler::jpa_rollaback_Transaction::exception:" + e.getMessage(), e);
            throw e;
            
        }               
    }
    
    protected byte[] jpa_get_id()
    {
        byte[] byteId = oidFactory.get().bytes();
        return byteId;
    }
    
    
    
    
    public void jpa_Folder_Insert(final Folder entity) throws RuntimeException {
        
        log_info("FolderHandler::jpa_Folder_InsertDao::method_start");
        ////PrintStateEx("FolderHandler::jpa_Folder_Insert::s1");
        try {
            log_Folder(entity,"jpa_Folder_InsertDao");
            if(transationByRow)
            {
                folderDao.persist(entity);
            }
            else
            {
            	log_info("transaction_per_operation");
            	if(!jpaOldApi)
            	{
            		log_info("transaction_per_operation_new_api");
            		folderDao.persistNT(entity);
            	}
            	else
            	{
            		log_info("transaction_per_operation_old_api");
            		jpa_getEmRate_2().persist(entity);
            	}
            }
            log_info("FolderHandler::jpa_Folder_InsertDao::method_end");
            
        } catch (final Exception re) {          
            log_info_exception("FolderHandler::jpa_Folder_InsertDao::exception:" + re.getMessage(), re);            
            throw re;
        }
    }
    
    
    public void jpa_Folder_Update(final Folder entity) throws RuntimeException {
        log_info("FolderHandler::jpa_Folder_Update::method_start");
        try {
            log_Folder(entity,"jpa_Folder_Update");
            
            if(transationByRow)
            {
            	log_info("transaction_per_item");
                folderDao.update(entity);
            }
            else
            {
            	log_info("transaction_per_operation");
            	if(!jpaOldApi)
            	{            		
            		log_info("transaction_per_operation_new_api");
            		folderDao.updateNT(entity);
            		
            	}
            	else
            	{
            		log_info("transaction_per_operation_old_api");
            		jpa_getEmRate_2().merge(entity);
            	}
            }
            log_info("FolderHandler::jpa_Folder_Update::method_end_success");
        } catch (final Exception re) {
            log_info_exception("FolderHandler::jpa_Folder_Update::exception:" + re.getMessage(), re);
            throw re;
        }
    }
    
    public void jpa_Folder_Remove(final Folder entity) throws RuntimeException {
        log_info("FolderHandler::jpa_Folder_Remove::method_start");
        ////PrintStateEx("FolderHandler::jpa_Folder_Insert::s1");
        try {
            log_Folder(entity,"jpa_Folder_Remove");
            //jpa_getEmRate_2().remove(entity);
            if(transationByRow)
            {
            	log_info("transaction_per_item");
                knuserDao.removeObj(entity);
            }
            else
            {            
            	log_info("transaction_per_operation");
            	if(!jpaOldApi)
            	{            		           
            		log_info("transaction_per_operation_new_api");
            		knuserDao.removeNT(entity);
            	}
            	else
            	{
            		log_info("transaction_per_operation_old_api");
            		jpa_getEmRate_2().remove(entity);
            	}
            }
            log_info("FolderHandler::jpa_Folder_Remove::method_end");
            
        } catch (final Exception re) {          
            log_info_exception("FolderHandler::jpa_Folder_Remove::exception:" + re.getMessage(), re);            
            throw re;
        }
    }
    
    public int jpa_AccessFolders_Insert(final Folder folder) {
        log_info("FolderHandler::jpa_AccessFolders_Insert::method_start");        
        try {
                Set<AccessFolder> ac = folder.getAccessFolders();
                for(AccessFolder accessFolder : ac)
                {
                    jpa_AccessFolder_Insert(accessFolder);
                    Knuser dd_uu = accessFolder.getKnuser();             
                    jpa_Knuser_Update(dd_uu);
                }
                log_info("FolderHandler::jpa_AccessFolders_Insert::method_end_success");  
            return 1;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::jpa_AccessFolders_Insert::exception:", ee);
            throw ee;
        }
    }
    
    public int jpa_AccesFolders_Remove(final Folder folder) {
        log_info("FolderHandler::jpa_AccesFolders_Remove::method_start");
        
        try {
            Set<AccessFolder> ac = folder.getAccessFolders();
            for(AccessFolder entity : ac)
            {            	
            	jpa_AccesFolder_Remove(entity);
            }
            log_info("FolderHandler::jpa_AccesFolders_Remove::method_end_success");   
            return 1;
        } catch (final Exception ee) {
            log_info_exception("FolderHandler::jpa_AccesFolders_Remove::exception:", ee);
            throw ee;
        }
    }
    
    public int jpa_AccesFolder_Remove(final AccessFolder entity) {
        log_info("FolderHandler::jpa_AccesFolder_Remove::method_start");
        
        try {        	
    		log_info("FolderHandler::jpa_AccessFolder_Insert::method_end");
    		
        	log_AccessFolder(entity,"jpa_AccesFolder_Remove");
        	
            if(transationByRow)
            {
                log_info("jpa_AccesFolder_Remove::transaction_per_item");
                accessFolderDao.removeObj( entity );
                //jpa_getEmRate_2().detach(accessFolder);
            }
            else
            {
                log_info("jpa_AccesFolder_Remove::transaction_per_operation");
            	if(!jpaOldApi)
            	{
            		log_info("jpa_AccesFolder_Remove::dao_api");
            		accessFolderDao.removeNT(entity);
            	}
            	else{
            		log_info("jpa_AccesFolder_Remove::old_api");
            		jpa_getEmRate_2().remove(entity);
            	}
            }                
    		
    		return 1;
        } catch (final Exception re) {            
            log_info_exception("FolderHandler::jpa_AccesFolder_Remove::exception:" + re.getMessage(), re);
            throw re;
        }
    }
    
   
    public void jpa_AccessFolder_Insert(final AccessFolder entity) throws RuntimeException {
        log_info("FolderHandler::jpa_AccessFolder_Insert::method_start");        
        try {
        	
            log_AccessFolder(entity,"jpa_AccessFolder_Insert");
            
            if(transationByRow)
            {
                log_info("jpa_AccessFolder_Insert::transaction_per_item");
                accessFolderDao.persist(entity);
            }
            else
            {            
                log_info("jpa_AccessFolder_Insert::transaction_per_operation");
                if(!jpaOldApi)
            	{
                	log_info("jpa_AccessFolder_Insert::dao_api");
                	accessFolderDao.persistNT(entity);
            	}
                else
            	{
                	log_info("jpa_AccessFolder_Insert::old_api");
            		jpa_getEmRate_2().persist(entity);
            	}
            }
            //jpa_getEmRate_2().persist(entity);
            log_info("FolderHandler::jpa_AccessFolder_Insert::method_end");
            
        } catch (final Exception re) {
            
            log_info_exception("FolderHandler::jpa_AccessFolder_Insert::exception:" + re.getMessage(), re);
            throw re;
        }
    }
    
   
    
    
    public void jpa_Knuser_Insert(final Knuser entity) throws RuntimeException {
        log_info("FolderHandler::jpa_Knuser_Insert::method_start");        
        try 
        {
            log_Knuser(entity);
            if(entity != null)
            {
            	
                log_info("persist_user");
                
                //jpa_getEmRate_2().persist(entity);
                if(transationByRow)
                {
                    log_info("jpa_AccessFolder_Insert::transaction_per_item");
                    knuserDao.persist(entity);
                }
                else
                {            
                    log_info("jpa_AccessFolder_Insert::transaction_per_operation");
                    if(!jpaOldApi)
                	{         
                    	log_info("jpa_AccessFolder_Insert::dao_api");
                    	knuserDao.persistNT(entity);
                	}
                    else
                	{
                    	log_info("jpa_AccessFolder_Insert::old_api");
                    	jpa_getEmRate_2().persist(entity);
                	}
                }
            }
            else
            {
                log_info("jpa_AccessFolder_Insert::user_is_null");
            }
            log_info("FolderHandler::jpa_Knuser_Insert::method_end");
            
        } catch (final Exception re) {
            
            log_info_exception("FolderHandler::jpa_Knuser_Insert::exception:" + re.getMessage(), re);
            throw re;
        }
    }
    
    public void jpa_Knuser_Update(final Knuser entity) throws RuntimeException {
        log_info("FolderHandler::jpa_Knuser_Update::method_start");        
        try 
        {
            log_Knuser(entity);
            if(entity != null)
            {
                log_info("persist_user");
                if(transationByRow)
                {
                    log_info("jpa_Knuser_Update::transaction_per_item");
                    knuserDao.persist(entity);
                }
                else
                {            
                    log_info("jpa_Knuser_Update::transaction_per_operation");
                    if(!jpaOldApi)
                	{
                    	log_info("jpa_Knuser_Update::dao_api");
                    	knuserDao.updateNT(entity);
                	}
                    else
                    {
                    	log_info("jpa_Knuser_Update::old_api");
                    	jpa_getEmRate_2().merge(entity);
                    }
                }
            }
            else
            {
                log_info("user_is_null");
            }
            log_info("FolderHandler::jpa_Knuser_Update::method_end");
            
        } catch (final Exception re) {
            
            log_info_exception("FolderHandler::jpa_Knuser_Insert::exception:" + re.getMessage(), re);
            throw re;
        }
    }
    
    
    /* id helpers */
    
    
    public byte[] s2id(String ss){
        byte[] id = IdConvertion.getByteFromHexString(ss);
        return id;
    }
    
    public String id2s(byte[] id)
    {
        return IdConvertion.getHexStringFromByte(id);
    }
    
    /* log helpers */
    
    public void log_Folder(Folder folder,String header)
    {
        String ssm = "    ";
        String ss = "        ";
        
        log_info(ssm + "Folder_log__start__" + header);
        log_info(ss + "Folder::id:" + id2s(folder.getId()));
        log_info(ss + "Folder::id_byte:" + (folder.getId()));
        log_info(ss + "Folder::Name:" + folder.getName());
        log_info(ss + "Folder::ShortName:" + folder.getShortName());        
        log_info(ss + "Folder::getOca:" + Integer.toString(folder.getOca()));       
        Set<AccessFolder> ac = folder.getAccessFolders();
        log_info(ss + "Folder::accessFolders:" + ac.size());
        
        for(AccessFolder dd : ac)
        {
            log_AccessFolder(dd,"included");
        }
        log_info(ssm + "Folder_log__end__" + header);
    }

    
    public void log_Knuser(Knuser entity)
    {
        String ssm = "    ";
        String ss = "        ";
        log_info(ssm+"Knuser_log__start");
        if(entity!=null)
        {
            log_info(ss+"Knuser::id:" + id2s(entity.getId()));      
            log_info(ss+"Knuser::getOca:" + Integer.toString(entity.getOca()));
            log_info(ss+"Knuser::id:" + entity.getShortName());
        }
        else
        {
            log_info(ss + "Knuser::id_is_null:");
        }       
        log_info(ssm + "Knuser_log__end");
    }
    

    public void log_AccessFolder(AccessFolder accesFolder,String header)
    {
        String ssm = "    ";
        String ss = "        ";
        
        log_info(ssm + "AccessFolder_log__start__" + header);
        log_info(ss + "AccessFolder::id:" + id2s(accesFolder.getId()));  
        log_info(ss + "AccessFolder::id_byte:" + (accesFolder.getId()));
        log_info(ss + "AccessFolder::getOca:" + Integer.toString(accesFolder.getOca()));
        log_info(ss + "AccessFolder::getAccessMode:" + accesFolder.getAccessMode());
        log_info(ss + "AccessFolder::getAccessRightRead:" + accesFolder.getAccessRightRead());
        log_info(ss + "AccessFolder::getAccessRightWrite:" + accesFolder.getAccessRightWrite());
        
        if(accesFolder.getFolder() != null)
        {
            log_info(ss + "AccessFolder:Folder:id:" + id2s(accesFolder.getFolder().getId()));
        }
        else
        {
            log_info(ss + "AccessFolder:Folder:id_null:");
        }
        log_Knuser(accesFolder.getKnuser());
        log_info(ssm + "AccessFolder_log__end__" + header);
    }

    public static void log_info(final String ss) {
        System.out.println(ss);
    }

    public static void log_info(final String ss, final Exception ex) {
        log_info_exception(ss, ex);
    }

    public static void log_info_exception(final String ss, final Exception ex) {
        try{
            System.out.println(ss);

	        final CharArrayWriter cw = new CharArrayWriter();
	        final PrintWriter w = new PrintWriter(cw);
	        ex.printStackTrace(w);
	        w.close();
	        final String trace = cw.toString();
	        System.out.println(ss + " " + trace);
		}catch(Exception ee){
		
		}
    }

    public void PrintStateEx(final String ss) {

        log_info(ss + "::AbstractValueObjectHandler::PrintState::start_method");
        log_info("etRate_isActive:" + jpa_getTransactionRate_2().isActive());
        log_info(ss + "::AbstractValueObjectHandler::PrintState::end_method");
    }
}
