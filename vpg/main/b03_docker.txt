central host:
gklab-132-018.igk.intel.com

services:

cadvisor - http://monitor.vpgtools.intel.com
perf20mysql - open through 3306 port
haproxy - main proxy, statys: http://vpgtools.intel.com/haproxyStats
perf20sso - SSO for perf20 apps
wmtdashboard - http://goto/wmt
galdashboard - http://goto/gal
requestsdashboard - http://goto/wmtreq
wmtfrontest - http://wmt-test
galfrontest - http://gal-test
requestsfrontest - http://requests-test
start sequence

docker start perf20mysql
docker start perf20memcached
docker start perf20test
docker start perf20hardware
docker start perf20sso
docker start wmtdashboard
docker start galdashboard
docker start requestsdashboard
docker start cadvisor
docker start wmtfrontest
docker start galfrontest
docker start requestsfrontest
docker start haproxy
esx1
10.237.132.143

services

perf20memcached
wmtbackend - API for http://goto/wmt
galbackend - API for http://goto/gal
requestsbackend - API for http://goto/wmtreq
wmtbacktest - API for http://goto/wmt-test
reqbacktest - API for http://goto/requests-test
galbacktest - API for http://goto/gal-test
rabbitmq - GUI: http://databus.vpgtools.intel.com
start sequence

docker start perf20memcached
docker start rabbitmq
docker start wmtbackend
docker start galbackend
docker start requestsbackend
docker start wmtbacktest
docker start reqbacktest
docker start galbacktest
esx2
10.237.132.145

services

perf20memcached
perf20web - http://goto/performance20
messenger
start sequence

docker start perf20memcached
docker start perf20web
docker start messenger
entrance to container
docker exec -it <containername> bash -l

export TERM=xterm # before vim, htop or any term-dependend application
building container
list of all commands is listed in docker files sequence.txt

updating application
production frontend

wmtdashboard
galdashboard
requestsdashboard
docker exec -it <containername> bash -l
cd /var/www/ember/dist/<app_name>
./runapp.sh
Please note: production code is builded application taken from "release" branch.

test frontend

wmtfrontest
galfrontest
requestsfrontest
docker restart <container_name>
# update takes about 3-5 min.
# logs available: docker logs -f <container_name>
# update finishes with informations in logs: "NEW TEST VERSION is ready to use"
Please note: test code is source application taken from "master" branch.

production backend

wmtbackend
galbackend
requestsbackend
docker exec -it <container_name> bash -l
cd /var/www/<app_slug>_backend/
pkill -9 supervisord
./update.sh
/usr/bin/supervisord
Please note: production code is builded application taken from "release" branch.

test backend

wmtbacktest
reqbacktest
galbacktest
docker restart <container_name>
# update takes about 3-5 min.
# logs available: docker logs -f <conainer_name>
# update finishes with informations generated by supervisord
Please note: test code is source application taken from "master" branch.

messenger

docker exec -it messenger bash -l
./update.sh
# after update you can check status of application
pm2 monitor messenger
# and for logs
pm2 logs messenger
Please note: production code is source application taken from "master" branch, because this project using gitflow.

performance 2.0

docker exec -it perf20web bash -l
./updapp.sh
Please note: production code is source application taken from "master" branch.

Adding new site to stack
add new domain via ddi.intel.com
when domain is added do company DNS:
go to gklab-132-018.igk.intel.com
export TERM=xterm
vim /var/www/haproxy/haproxy.cfg
# add new site configuration
docker restart haproxy